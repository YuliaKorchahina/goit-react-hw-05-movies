{"version":3,"file":"static/js/134.1ee7e72f.chunk.js","mappings":"mPAOOA,EAAS,WAAO,IAAD,EACpB,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA4BC,EAAAA,EAAAA,MAA5B,eAAOC,EAAP,KAAeC,EAAf,KAEMC,EAAU,UAAGF,EAAOG,IAAI,qBAAd,QAA+B,GACzCC,EAAqB,mCAAG,gHAEAC,EAAAA,EAAAA,IAAeH,GAFf,mBAElBI,EAFkB,EAElBA,QACRC,QAAQC,IAAIF,GACZR,EAAUQ,GACa,IAAnBA,EAAQG,OALc,kCAMXC,QAAQC,OAAO,IAAIC,MAAJ,YAAeV,EAAf,QANJ,mGAS1BK,QAAQC,IAAR,MAT0B,0DAAH,qDAsB3B,OACE,iCACE,8CACA,kBAAMK,SARW,SAAAC,GACnBA,EAAEC,iBACFX,GACD,EAKG,WACE,kBACEY,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,cACZC,MAAOlB,EACPmB,SAAU,SAAAC,GAAG,OAAIrB,EAAU,CAAEC,WAAYoB,EAAIC,OAAOH,OAAvC,KAEf,mBAAQJ,KAAK,SAASQ,QAAS,kBAAM,IAAN,EAA/B,UAA2C,0CAE5C3B,IACC,wBACGA,EAAO4B,KAAI,SAAAC,GAAK,OACf,yBACE,SAAC,KAAD,CAAMC,GAAE,UAAKD,EAAME,IAAnB,SAA0BF,EAAMG,SADzBH,EAAME,GADA,QAS1B,EAEDjC,EAAOmC,WAAa,CAClBD,MAAOE,IAAAA,OAAAA,WACPH,GAAIG,IAAAA,OAAAA,YAGN,W,yLChEMC,E,QAAWC,EAAAA,OAAa,CAC5BC,QAAS,gCACTC,OAAQ,CACNC,QAAS,sCAIAC,EAAgB,mCAAG,+GAELL,EAAS7B,IAAT,oBAFK,uBAEpBmC,EAFoB,EAEpBA,KAFoB,kBAGrBA,GAHqB,gCAK5B/B,QAAQC,IAAR,MAL4B,yDAAH,qDAShBH,EAAc,mCAAG,WAAML,GAAN,yFACTgC,EAAS7B,IAAT,eAA6B,CAChDgC,OAAQ,CACNI,MAAM,GAAD,OAAKvC,MAHgB,uBACvBsC,EADuB,EACvBA,KADuB,kBAMvBA,GANuB,2CAAH,sDAUdE,EAAY,mCAAG,WAAMZ,GAAN,kGAEDI,EAAS7B,IAAT,iBAAuByB,IAFtB,uBAEhBU,EAFgB,EAEhBA,KAFgB,kBAGjBA,GAHiB,gCAKxB/B,QAAQC,IAAR,MALwB,yDAAH,sDAUZiC,EAAgB,mCAAG,WAAMb,GAAN,kGAELI,EAAS7B,IAAT,iBAAuByB,EAAvB,aAFK,uBAEpBU,EAFoB,EAEpBA,KAFoB,kBAGrBA,GAHqB,gCAK5B/B,QAAQC,IAAR,MAL4B,yDAAH,sDAShBkC,EAAkB,mCAAG,WAAMd,GAAN,kGAEPI,EAAS7B,IAAT,iBAAuByB,EAAvB,aAFO,uBAEtBU,EAFsB,EAEtBA,KAFsB,kBAGvBA,GAHuB,gCAK9B/B,QAAQC,IAAR,MAL8B,yDAAH,qD","sources":["pages/Movies.jsx","servises/Api.js"],"sourcesContent":["import { useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getSearchMovie } from '../servises/Api';\nimport PropTypes from 'prop-types';\n\nimport { Link } from 'react-router-dom';\n\n const Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [search, setSearch] = useSearchParams();\n\n  const movieQuery = search.get('movieQuery') ?? '';\n  const getSearchMoviebyQuery = async () => {\n    try {\n      const { results } = await getSearchMovie(movieQuery);\n      console.log(results);\n      setMovies(results);\n      if (results.length === 0) {\n        return await Promise.reject(new Error(`\" ${movieQuery} \"`));\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // useEffect(() => {\n  //   getSearchMoviebyQuery();\n  // }, []);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    getSearchMoviebyQuery();\n  };\n\n  return (\n    <>\n      <p>Enter movie title</p>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Enter movie\"\n          value={movieQuery}\n          onChange={evt => setSearch({ movieQuery: evt.target.value })}\n        />\n        <button type=\"submit\" onClick={() => null}><span>Search</span></button>\n      </form>\n      {movies && (\n        <ul>\n          {movies.map(movie => (\n            <li key={movie.id}>\n              <Link to={`${movie.id}`}>{movie.title}</Link>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\nMovies.protoTypes = {\n  title: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n}\n\nexport default Movies;","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: 'af7806c242ad95763370aa39444155c5',\n  },\n});\n\nexport const getTrendingMovie = async () => {\n  try {\n    const { data } = await instance.get(`trending/all/day`);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getSearchMovie = async search => {\nconst {data} = await instance.get(`search/movie`, {\n  params: {\n    query: `${search}`,\n  }\n});\nreturn data;\n\n};\n\nexport const getMovieById = async id => {\n  try {\n    const { data } = await instance.get(`/movie/${id}`);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n\nexport const getMovieCastById = async id => {\n  try {\n    const { data } = await instance.get(`/movie/${id}/credits`);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMovieReviewById = async id => {\n  try {\n    const { data } = await instance.get(`/movie/${id}/reviews`);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};"],"names":["Movies","useState","movies","setMovies","useSearchParams","search","setSearch","movieQuery","get","getSearchMoviebyQuery","getSearchMovie","results","console","log","length","Promise","reject","Error","onSubmit","e","preventDefault","type","autoComplete","autoFocus","placeholder","value","onChange","evt","target","onClick","map","movie","to","id","title","protoTypes","PropTypes","instance","axios","baseURL","params","api_key","getTrendingMovie","data","query","getMovieById","getMovieCastById","getMovieReviewById"],"sourceRoot":""}